#!/usr/bin/env python3
"""
Pre-Quest Example 2: Sentence Transformers
Aprende c√≥mo usar modelos pre-entrenados para convertir texto a vectores
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.metrics.pairwise import cosine_similarity
import warnings
warnings.filterwarnings('ignore')

def verificar_instalacion():
    """
    Verificar si sentence-transformers est√° instalado
    """
    try:
        from sentence_transformers import SentenceTransformer
        return True
    except ImportError:
        print("‚ùå sentence-transformers no est√° instalado")
        print("üì• Instalar con: pip install sentence-transformers")
        return False

def ejemplo_embeddings_basicos():
    """
    üéØ Objetivo: Generar embeddings con sentence-transformers
    """
    if not verificar_instalacion():
        return None
    
    from sentence_transformers import SentenceTransformer
    
    print("ü§ñ EJEMPLO 1: Embeddings con Sentence Transformers")
    print("=" * 60)
    
    # Cargar modelo pre-entrenado
    print("üì• Cargando modelo 'all-MiniLM-L6-v2'...")
    model = SentenceTransformer('all-MiniLM-L6-v2')
    print("‚úÖ Modelo cargado exitosamente")
    
    # Frases de ejemplo
    frases = [
        "El gato est√° durmiendo en el sof√°",
        "Un felino descansa en el mueble",
        "El perro ladra en el jard√≠n",
        "Un canino hace ruido afuera",
        "Me gusta programar en Python",
        "Disfruto codificar con Python",
        "El clima est√° soleado hoy",
        "Llueve mucho esta ma√±ana"
    ]
    
    print(f"\nüìù Procesando {len(frases)} frases...")
    
    # Generar embeddings
    embeddings = model.encode(frases)
    
    print(f"‚úÖ Embeddings generados!")
    print(f"üìè Dimensi√≥n de cada vector: {embeddings.shape[1]}")
    print(f"üî¢ Forma del array: {embeddings.shape}")
    
    # Mostrar informaci√≥n de cada embedding
    for i, (frase, embedding) in enumerate(zip(frases, embeddings)):
        print(f"\nüî§ Frase {i+1}: '{frase}'")
        print(f"üî¢ Vector (primeros 5 valores): {embedding[:5]}")
        print(f"üìä Magnitud del vector: {np.linalg.norm(embedding):.3f}")
    
    return frases, embeddings, model

def calcular_similitudes_embeddings(frases, embeddings):
    """
    üéØ Objetivo: Calcular similitudes entre embeddings
    """
    print("\n\nüîç EJEMPLO 2: Similitudes entre Embeddings")
    print("=" * 60)
    
    # Calcular matriz de similitudes
    similitudes = cosine_similarity(embeddings)
    
    print("üìä Matriz de similitudes (solo valores > 0.5):")
    print("   ", "  ".join([f"{i:2d}" for i in range(len(frases))]))
    
    for i in range(len(frases)):
        fila = f"{i:2d} "
        for j in range(len(frases)):
            if similitudes[i, j] > 0.5:
                fila += f"{similitudes[i, j]:.2f} "
            else:
                fila += "---- "
        print(fila)
    
    # Encontrar pares m√°s similares
    print("\nüèÜ Top 5 pares m√°s similares:")
    pares_similitud = []
    
    for i in range(len(frases)):
        for j in range(i+1, len(frases)):
            pares_similitud.append((
                similitudes[i, j], 
                i, j, 
                frases[i][:30] + "...", 
                frases[j][:30] + "..."
            ))
    
    # Ordenar por similitud descendente
    pares_similitud.sort(reverse=True)
    
    for idx, (sim, i, j, frase1, frase2) in enumerate(pares_similitud[:5]):
        print(f"{idx+1}. Similitud: {sim:.3f}")
        print(f"   üìù '{frase1}' ‚Üî '{frase2}'")

def comparar_metodos_vectorizacion():
    """
    üéØ Objetivo: Comparar diferentes m√©todos de vectorizaci√≥n
    """
    print("\n\n‚öñÔ∏è EJEMPLO 3: Comparaci√≥n de M√©todos")
    print("=" * 60)
    
    if not verificar_instalacion():
        return
    
    from sentence_transformers import SentenceTransformer
    from sklearn.feature_extraction.text import TfidfVectorizer
    
    # Frases para comparar
    frases = [
        "gato animal dom√©stico",
        "felino mascota casa",
        "perro animal leal",
        "canino mascota fiel"
    ]
    
    print("üìù Frases de prueba:")
    for i, frase in enumerate(frases):
        print(f"   {i+1}. '{frase}'")
    
    # M√©todo 1: TF-IDF (tradicional)
    print("\nüìä M√©todo 1: TF-IDF")
    vectorizer = TfidfVectorizer()
    tfidf_vectors = vectorizer.fit_transform(frases).toarray()
    
    # Similitud entre frases 1 y 2 (gato vs felino)
    sim_tfidf = cosine_similarity([tfidf_vectors[0]], [tfidf_vectors[1]])[0][0]
    print(f"   Similitud 'gato animal' vs 'felino mascota': {sim_tfidf:.3f}")
    
    # M√©todo 2: Sentence Transformers
    print("\nü§ñ M√©todo 2: Sentence Transformers")
    model = SentenceTransformer('all-MiniLM-L6-v2')
    st_vectors = model.encode(frases)
    
    sim_st = cosine_similarity([st_vectors[0]], [st_vectors[1]])[0][0]
    print(f"   Similitud 'gato animal' vs 'felino mascota': {sim_st:.3f}")
    
    print("\nüí° Observaciones:")
    print(f"   ‚Ä¢ TF-IDF: {sim_tfidf:.3f} (basado en palabras exactas)")
    print(f"   ‚Ä¢ Sentence Transformers: {sim_st:.3f} (entiende significado)")
    print("   ‚Ä¢ Sentence Transformers captura mejor la sem√°ntica!")

def busqueda_semantica_ejemplo():
    """
    üéØ Objetivo: Demostrar b√∫squeda sem√°ntica
    """
    print("\n\nüîç EJEMPLO 4: B√∫squeda Sem√°ntica")
    print("=" * 60)
    
    if not verificar_instalacion():
        return
    
    from sentence_transformers import SentenceTransformer
    
    # Base de datos de documentos
    documentos = [
        "Python es un lenguaje de programaci√≥n vers√°til y f√°cil de aprender",
        "La inteligencia artificial est√° revolucionando la tecnolog√≠a",
        "Los gatos son animales independientes y cari√±osos",
        "Machine learning utiliza algoritmos para aprender de datos",
        "Los perros son leales compa√±eros de los humanos",
        "JavaScript es popular para desarrollo web",
        "Las redes neuronales imitan el funcionamiento del cerebro",
        "Los felinos son cazadores naturales muy eficientes",
        "React es una biblioteca de JavaScript para interfaces",
        "El deep learning es una rama del machine learning"
    ]
    
    print(f"üìö Base de datos: {len(documentos)} documentos")
    
    # Cargar modelo y generar embeddings
    model = SentenceTransformer('all-MiniLM-L6-v2')
    doc_embeddings = model.encode(documentos)
    
    # Consultas de prueba
    consultas = [
        "programaci√≥n y c√≥digo",
        "animales dom√©sticos",
        "inteligencia artificial"
    ]
    
    for consulta in consultas:
        print(f"\nüîé Consulta: '{consulta}'")
        
        # Generar embedding de la consulta
        consulta_embedding = model.encode([consulta])
        
        # Calcular similitudes
        similitudes = cosine_similarity(consulta_embedding, doc_embeddings)[0]
        
        # Encontrar top 3 m√°s similares
        indices_top = np.argsort(similitudes)[::-1][:3]
        
        print("   üìä Top 3 resultados:")
        for i, idx in enumerate(indices_top):
            print(f"   {i+1}. Similitud: {similitudes[idx]:.3f}")
            print(f"      üìÑ '{documentos[idx]}'")

def visualizar_embeddings():
    """
    üéØ Objetivo: Visualizar embeddings en 2D
    """
    print("\n\nüìà EJEMPLO 5: Visualizaci√≥n de Embeddings")
    print("=" * 60)
    
    if not verificar_instalacion():
        return
    
    from sentence_transformers import SentenceTransformer
    
    # Frases agrupadas por temas
    frases = [
        # Tecnolog√≠a
        "programaci√≥n en Python",
        "desarrollo de software", 
        "inteligencia artificial",
        # Animales
        "gatos dom√©sticos",
        "perros leales",
        "animales de compa√±√≠a",
        # Comida
        "pizza italiana deliciosa",
        "pasta con salsa",
        "comida mediterr√°nea",
        # Deportes
        "f√∫tbol y goles",
        "baloncesto profesional",
        "deportes de equipo"
    ]
    
    categorias = ["tech", "tech", "tech", "animals", "animals", "animals", 
                 "food", "food", "food", "sports", "sports", "sports"]
    
    # Generar embeddings
    model = SentenceTransformer('all-MiniLM-L6-v2')
    embeddings = model.encode(frases)
    
    # Reducir dimensionalidad con PCA
    pca = PCA(n_components=2)
    embeddings_2d = pca.fit_transform(embeddings)
    
    # Crear gr√°fico
    plt.figure(figsize=(12, 8))
    
    colores = {'tech': 'red', 'animals': 'blue', 'food': 'green', 'sports': 'orange'}
    
    for categoria in set(categorias):
        indices = [i for i, cat in enumerate(categorias) if cat == categoria]
        x = [embeddings_2d[i][0] for i in indices]
        y = [embeddings_2d[i][1] for i in indices]
        plt.scatter(x, y, c=colores[categoria], label=categoria, s=100, alpha=0.7)
        
        # A√±adir etiquetas
        for i in indices:
            plt.annotate(frases[i][:15] + "...", 
                        (embeddings_2d[i][0], embeddings_2d[i][1]),
                        xytext=(5, 5), textcoords='offset points', fontsize=8)
    
    plt.xlabel('Componente Principal 1')
    plt.ylabel('Componente Principal 2')
    plt.title('Visualizaci√≥n de Embeddings por Categor√≠as')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    try:
        plt.tight_layout()
        plt.savefig('/home/andy/quicksight/vectorDb/src/preQuest/embeddings_visualization.png', 
                   dpi=150, bbox_inches='tight')
        plt.show()
        print("üíæ Gr√°fico guardado como 'embeddings_visualization.png'")
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo crear el gr√°fico: {e}")

def main():
    """
    Ejecutar todos los ejemplos
    """
    print("ü§ñ PRE-QUEST: Sentence Transformers")
    print("üéØ Embeddings profesionales con modelos pre-entrenados")
    print("=" * 80)
    
    # Verificar instalaci√≥n
    if not verificar_instalacion():
        print("\nüí° Para instalar sentence-transformers:")
        print("   pip install sentence-transformers")
        print("\nüéÆ Mientras tanto, puedes ejecutar 01_manual_vectors.py")
        return
    
    # Ejecutar ejemplos
    frases, embeddings, model = ejemplo_embeddings_basicos()
    if embeddings is not None:
        calcular_similitudes_embeddings(frases, embeddings)
        comparar_metodos_vectorizacion()
        busqueda_semantica_ejemplo()
        
        try:
            visualizar_embeddings()
        except Exception as e:
            print(f"‚ö†Ô∏è Error en visualizaci√≥n: {e}")
    
    print("\n\nüéâ ¬°Ejemplos de Sentence Transformers completados!")
    print("üí° Conceptos clave aprendidos:")
    print("   ‚Ä¢ Modelos pre-entrenados para embeddings")
    print("   ‚Ä¢ Embeddings densos vs sparse")
    print("   ‚Ä¢ Similitud sem√°ntica vs similitud l√©xica")
    print("   ‚Ä¢ B√∫squeda sem√°ntica en documentos")
    print("   ‚Ä¢ Visualizaci√≥n de espacios vectoriales")
    print("\nüéÆ ¬°Ahora tienes las bases para Quest 2: Real Vector Database!")

if __name__ == "__main__":
    main()